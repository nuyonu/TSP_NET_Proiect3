//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPhotosDatabase.Models.DTO
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaDTO", Namespace="http://schemas.datacontract.org/2004/07/MyPhotosDatabase.Models.DTO", IsReference=true)]
    public partial class MediaDTO : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedDateField;
        
        private bool DeletedField;
        
        private string DescriptionField;
        
        private string EventField;
        
        private string FormatField;
        
        private System.Guid IdField;
        
        private string LocationField;
        
        private string NameField;
        
        private string PathField;
        
        private string PeopleField;
        
        private string TagsField;
        
        private MyPhotosDatabase.Enums.MediaType TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate
        {
            get
            {
                return this.CreatedDateField;
            }
            set
            {
                this.CreatedDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted
        {
            get
            {
                return this.DeletedField;
            }
            set
            {
                this.DeletedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Format
        {
            get
            {
                return this.FormatField;
            }
            set
            {
                this.FormatField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path
        {
            get
            {
                return this.PathField;
            }
            set
            {
                this.PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string People
        {
            get
            {
                return this.PeopleField;
            }
            set
            {
                this.PeopleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Tags
        {
            get
            {
                return this.TagsField;
            }
            set
            {
                this.TagsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosDatabase.Enums.MediaType Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
}
namespace MyPhotosDatabase.Enums
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaType", Namespace="http://schemas.datacontract.org/2004/07/MyPhotosDatabase.Enums")]
    public enum MediaType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Video = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Photo = 1,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IPhotoManagerService")]
public interface IPhotoManagerService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/SaveMedia", ReplyAction="http://tempuri.org/IMedia/SaveMediaResponse")]
    void SaveMedia(MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/SaveMedia", ReplyAction="http://tempuri.org/IMedia/SaveMediaResponse")]
    System.Threading.Tasks.Task SaveMediaAsync(MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/GetMediaById", ReplyAction="http://tempuri.org/IMedia/GetMediaByIdResponse")]
    MyPhotosDatabase.Models.DTO.MediaDTO GetMediaById(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/GetMediaById", ReplyAction="http://tempuri.org/IMedia/GetMediaByIdResponse")]
    System.Threading.Tasks.Task<MyPhotosDatabase.Models.DTO.MediaDTO> GetMediaByIdAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/GetAll", ReplyAction="http://tempuri.org/IMedia/GetAllResponse")]
    MyPhotosDatabase.Models.DTO.MediaDTO[] GetAll();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/GetAll", ReplyAction="http://tempuri.org/IMedia/GetAllResponse")]
    System.Threading.Tasks.Task<MyPhotosDatabase.Models.DTO.MediaDTO[]> GetAllAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/GetAllWhere", ReplyAction="http://tempuri.org/IMedia/GetAllWhereResponse")]
    MyPhotosDatabase.Models.DTO.MediaDTO[] GetAllWhere(string toSearch, bool byDate, bool byEvent, bool byPeople, bool byLocation, bool byTags, bool byDescription);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/GetAllWhere", ReplyAction="http://tempuri.org/IMedia/GetAllWhereResponse")]
    System.Threading.Tasks.Task<MyPhotosDatabase.Models.DTO.MediaDTO[]> GetAllWhereAsync(string toSearch, bool byDate, bool byEvent, bool byPeople, bool byLocation, bool byTags, bool byDescription);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/UpdateMedia", ReplyAction="http://tempuri.org/IMedia/UpdateMediaResponse")]
    void UpdateMedia(System.Guid id, MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/UpdateMedia", ReplyAction="http://tempuri.org/IMedia/UpdateMediaResponse")]
    System.Threading.Tasks.Task UpdateMediaAsync(System.Guid id, MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/DeleteMedia", ReplyAction="http://tempuri.org/IMedia/DeleteMediaResponse")]
    void DeleteMedia(MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/DeleteMedia", ReplyAction="http://tempuri.org/IMedia/DeleteMediaResponse")]
    System.Threading.Tasks.Task DeleteMediaAsync(MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/DeleteMediaById", ReplyAction="http://tempuri.org/IMedia/DeleteMediaByIdResponse")]
    void DeleteMediaById(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/DeleteMediaById", ReplyAction="http://tempuri.org/IMedia/DeleteMediaByIdResponse")]
    System.Threading.Tasks.Task DeleteMediaByIdAsync(System.Guid id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/AlreadyInDatabaseAndNotDeleted", ReplyAction="http://tempuri.org/IMedia/AlreadyInDatabaseAndNotDeletedResponse")]
    bool AlreadyInDatabaseAndNotDeleted(string path);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMedia/AlreadyInDatabaseAndNotDeleted", ReplyAction="http://tempuri.org/IMedia/AlreadyInDatabaseAndNotDeletedResponse")]
    System.Threading.Tasks.Task<bool> AlreadyInDatabaseAndNotDeletedAsync(string path);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IPhotoManagerServiceChannel : IPhotoManagerService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class PhotoManagerServiceClient : System.ServiceModel.ClientBase<IPhotoManagerService>, IPhotoManagerService
{
    
    public PhotoManagerServiceClient()
    {
    }
    
    public PhotoManagerServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public PhotoManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public PhotoManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public PhotoManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void SaveMedia(MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO)
    {
        base.Channel.SaveMedia(mediaDTO);
    }
    
    public System.Threading.Tasks.Task SaveMediaAsync(MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO)
    {
        return base.Channel.SaveMediaAsync(mediaDTO);
    }
    
    public MyPhotosDatabase.Models.DTO.MediaDTO GetMediaById(System.Guid id)
    {
        return base.Channel.GetMediaById(id);
    }
    
    public System.Threading.Tasks.Task<MyPhotosDatabase.Models.DTO.MediaDTO> GetMediaByIdAsync(System.Guid id)
    {
        return base.Channel.GetMediaByIdAsync(id);
    }
    
    public MyPhotosDatabase.Models.DTO.MediaDTO[] GetAll()
    {
        return base.Channel.GetAll();
    }
    
    public System.Threading.Tasks.Task<MyPhotosDatabase.Models.DTO.MediaDTO[]> GetAllAsync()
    {
        return base.Channel.GetAllAsync();
    }
    
    public MyPhotosDatabase.Models.DTO.MediaDTO[] GetAllWhere(string toSearch, bool byDate, bool byEvent, bool byPeople, bool byLocation, bool byTags, bool byDescription)
    {
        return base.Channel.GetAllWhere(toSearch, byDate, byEvent, byPeople, byLocation, byTags, byDescription);
    }
    
    public System.Threading.Tasks.Task<MyPhotosDatabase.Models.DTO.MediaDTO[]> GetAllWhereAsync(string toSearch, bool byDate, bool byEvent, bool byPeople, bool byLocation, bool byTags, bool byDescription)
    {
        return base.Channel.GetAllWhereAsync(toSearch, byDate, byEvent, byPeople, byLocation, byTags, byDescription);
    }
    
    public void UpdateMedia(System.Guid id, MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO)
    {
        base.Channel.UpdateMedia(id, mediaDTO);
    }
    
    public System.Threading.Tasks.Task UpdateMediaAsync(System.Guid id, MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO)
    {
        return base.Channel.UpdateMediaAsync(id, mediaDTO);
    }
    
    public void DeleteMedia(MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO)
    {
        base.Channel.DeleteMedia(mediaDTO);
    }
    
    public System.Threading.Tasks.Task DeleteMediaAsync(MyPhotosDatabase.Models.DTO.MediaDTO mediaDTO)
    {
        return base.Channel.DeleteMediaAsync(mediaDTO);
    }
    
    public void DeleteMediaById(System.Guid id)
    {
        base.Channel.DeleteMediaById(id);
    }
    
    public System.Threading.Tasks.Task DeleteMediaByIdAsync(System.Guid id)
    {
        return base.Channel.DeleteMediaByIdAsync(id);
    }
    
    public bool AlreadyInDatabaseAndNotDeleted(string path)
    {
        return base.Channel.AlreadyInDatabaseAndNotDeleted(path);
    }
    
    public System.Threading.Tasks.Task<bool> AlreadyInDatabaseAndNotDeletedAsync(string path)
    {
        return base.Channel.AlreadyInDatabaseAndNotDeletedAsync(path);
    }
}
